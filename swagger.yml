swagger: "2.0"
info:
  title: "Star Supermarket"
  description: "Endpoints for the Star Supermarket System \n\n Team:\n- Carranza Torrico Juan Manuel\n- Paz Sea Yamil Ignacio\n- Saavedra Ayarde Stephanie Bel√©n \n- Salazar Paredes Sara Oneydi"
  version: "1.0.0"
host: "api.star.supermarket"
basePath: "/v1"
paths:
  /customer:
    post:
      tags:
      - "customer"
      summary: "Create customer"
      description: "This can only be done by the logged in customer."
      operationId: "createCustomer"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created customer object"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        default:
          description: "Successful operation"

  /customer/login:
    get:
      tags:
      - "customer"
      summary: "Logs customer into the system"
      description: "Logs user into the system with username and pass"
      operationId: "loginCustomer"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The customer name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful L"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              description: "Calls every hour allowed when customer calls"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "Time in UTC format when token expires"
        "400":
          description: "Invalid username/password"
  
  /customer/logout:
    get:
      tags:
      - "customer"
      summary: "Logs out current logged in customer session"
      description: ""
      operationId: "logoutCustomer"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "Successful Logout"

  /customer/{id}:
    put:
      tags:
      - "customer"
      summary: "Update Customer's address"
  
      description: "Allows you to update address in an especific user. One should be updated at a time"
      operationId: "updateCustomer"
      
      parameters:
      - in: "path"
        name: "id"
        description: "ID ofuser to be updated"
        type: "integer"
        required: true
            
      - in: "query"
        name: "address"
        description: "Field to be updated"
        type: "string"
        required: true
        
      - in: "query"
        name: "value"
        description: "New value of the previous field"
        type: "string"
        required: true
      
      responses:
        202:
          description: "Successful Request - User Updated"
        404:
          description: "Error - User Does Not Exist"
    
  /product:
    get:
      tags:
      - "Product"
      summary: "Obtiene la lista de productos"
      description: "Lista de productos"
      operationId: "getProduct"
      consumes:
      - "application/xml"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Veemos la lista de productos"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        "403":
          description: "Forbidden"
  
  /product/create:
    get:
      tags:
      - "Product"
      summary: "Finds Film by Actors"
      description: "Multiple Actors are in Multiple films"
      operationId: "findFilmByActor"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "ActorName"
        in: "query"
        description: "ActorName values that need to be considered for filter"
        required: true
        type: "array"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        "404":
          description: "File not found"
      
  /film/title={titleName}:
    get:
      tags:
      - "Film"
      summary: "Get films by title"
      description: "Multiple titles are in multiple films"
      operationId: "findFilmByTitle"
      produces:
      - "application/json"
      parameters:
        - name: "titleName"
          in: "query"
          description: "Film's title "
          required: true
          type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Film"
        "404":
          description: "File not found"
      
  /film/Actor={ActorName}?film={filmName}:
    get:
      tags:
      - "Film"
      summary: "Finds Film by Actors and film's name"
      description: "Multiple Actors are in Multiple films and similarys titles for multiple films"
      operationId: "findFilmByActorAndTitle"
      produces:
      - "application/json"
      parameters:
      - name: "ActorName, filmName"
        in: "query"
        description: "ActorName values that need to be considered for filter"
        required: true
        type: "array"
      responses:
        "200":
          description: "Successful Search"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Film"
        "404":
          description: "File not found"

  /cart:
    get:
      tags:
      - "Cart"
      summary: "Retrieve cart"
      description: "Retrieve a list of all the items pending in your cart."
      operationId: "getAllItems"
      produces:
      - "application/json"
      
      responses:
        202:
          description: "Successful Request - Retrieving items in Cart"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Film"
    
    post:
      tags:
      - "Cart"
      summary: "Add new item in the cart"
      description: " User indicates the Movie to add a new item in his cart"
      operationId: "addItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in: "query"
          name: "name"
          type: "string"
          required: true

        - in: "query"
          name: "quantity"
          description: "quantity of items to buy"
          type: "number"
          format: "double"
          required: true
          
        - in: "query"
          name: "price"
          description: "Price of each item"
          type: "number"
          format: "double"
          required: true
          
        - in: "query"
          name: "discount"
          description: "Discount on percentage rate"
          type: "number"
          format: "double"
          required: true
        
      responses:
        200:
          description: "Successful Request - Item added to Cart"
        405:    
          description: "Failed Request"

    delete:
      tags:
      - "Cart"
      summary: "Reset your cart"
      description: "Deletes all items in an existing cart."
      operationId: "deleteAll"
      produces:
      - "application/json"
      
      responses:
        202:
          description: "Successful request - Cart has been reset."
        401:
          description: "Unauthorized to make such call."
        500:
          description: "Error while trying to reset. Try again."

  /cart/{film_id}:    
    delete:
      tags:
      - "Cart"
      summary: "Delete an item"
      description: "Deletes an item from the current cart."
      operationId: "deleteItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      
      - in: "query"
        name: "cart_Id"
        description: "Id of a customer's cart"
        type: "integer"
        required: true
        
      - in: "path"
        name: "film_id"
        description: "Id of item to be deleted"
        type: "integer"
        required: true
      responses:
        202:
          description: "Successful Request - Item deleted"
        404:
          description: "Error - Item not found"

  /payment:
    post:
      tags:
      - "Rental and Payment"
      summary: "Register Payment"
      description: "Checkout cart"
      operationId: "registerPayment"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created payment object"
        required: true
        schema:
          $ref: "#/definitions/Payment"
      responses:
        default:
          description: "Successful operation"

  /Rental:
    post:
      tags:
      - "Rental and Payment"
      summary: "Register Rental"
      description: "Checkout cart"
      operationId: "registerRental"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created rental object"
        required: true
        schema:
          $ref: "#/definitions/Rental"
      responses:
        default:
          description: "Successful operation"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://api.sakila/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "Modify films in your account"
      read:pets: "Read your Films"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  Customer: 
    type: "object"
    properties:
      id_cliente:
        type: "string"
        description: "Llave primaria del cliente"
      name:
        type: "integer"
        description: "Nombre del cliente"
      lastname:
        type: "string"
        description: "Apellido del cliente"
      cedulaI:
        type: "string"
        description: "Cedula de identidad del cliente"
      telf:
        type: "string"
        description: "Numero de telefono del cliente"
     
      
  Product:
    type: "object"
    properties:
      id_producto:
        type: "string"
        description: "Es el id que permite poder identificar al producto mediante una llave"
      nombre:
        type: "string"
        description: "Nombre del producto"
      descripcion:
        type: "string"
        description: "Descripcion del producto"
      categoria:
        type: "string"
        description: "Categoria del producto"
      precio_venta:
        type: "number"
        format: "double"
        description: "Precio de venta"
      stock:
        type: "integer"
        description: "Stock del producto"
      precio_compra:
        type: "integer"
        format: "double"
        description: "Precio de compra con los proveedores"
      estado:
        type: "integer"
        description: "Estado de activo y desactivado"
      fecha_vencimiento:
        type: "integer"
        format: "date"
        description: "Fecha de vencimiento del producto"

  Proveedor:
    type: "object"
    properties:
      id_proveedor:
        type: "string"
        description: "Identificador del usuario"
      name:
        type: "string"
        description: "Nombre del Proveedor"
      lastname:
        type: "string"
        description: "Apellido del Proveedor"
      company:
        type: "string"
        description: "Nombre del proveedor"
      email:
        type: "string"
        description: "Correo Electronico del proveedor"
      phone:
        type: "number"
        description: "Numero de telefono del proveedor"
      estado:
        type: "integer"
        description: "Estado de activo y desactivado"  
  
  Usuario: 
    type: "object"
    properties:
      uid_usuario:
        type: "string"
        description: "Identificador del usuario"
      identificador:
        type: "string"
        description: "Identificador del usuarios"
      fecha_creacion:
        type: "string"
        format: "date-time"
        description: "Fecha de Creacion"
      fecha_acceso:
        type: "string"
        format: "date-time"
        description: "Fecha de Acceso"

  Ventas: 
    type: "object"
    properties:
      id_ventas:
        type: "string"
        description: "Identificador del usuario"
      identificador:
        type: "string"
        description: "Identificador del usuarios"
      fecha_creacion:
        type: "string"
        format: "date-time"
        description: "Fecha de Creacion"
      fecha_acceso:
        type: "string"
        format: "date-time"
        description: "Fecha de Acceso"
