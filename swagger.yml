swagger: "2.0"
info:
  title: "Star Supermarket"
  description: "Endpoints for the Star Supermarket System \n\n Team:\n- Carranza Torrico Juan Manuel\n- Paz Sea Yamil Ignacio\n- Saavedra Ayarde Stephanie Bel√©n \n- Salazar Paredes Sara Oneydi"
  version: "1.0.0"
host: "api.star.supermarket"
basePath: "/v1"
paths:

# Client Swagger
  /clienteG:
    get:
      tags:
      - "user"
      summary: "Obtener todos los clientes"
      description: "Tener la informacion de todos los clientes"
      operationId: "getUsersList"
      responses:
        200:
          description: "Successful request - Retrieving Customer List"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Customer"
  /clienteA:  
    post:
      tags:
      - "Customer"
      summary: "Create new Customer"
      description: "This can only be done by the logged into the system."
      operationId: "createCustomer"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created Customer object"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        200:
          description: "Successful request - User added"
        405:
          description: "Error while trying to add user"   
  /Customer/clienteCi:
    get:
      tags:
      - "Customer"
      summary: Get Customer info by Id
      operationId: "getCustomerInfo"
      parameters:
      
      - in: "body"
        name: "body"
        description: "get Customer object by id"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        200:
          description: "Successful Request"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "Error - User Does Not Exist"
  /clienteU :
    put:
      tags:
      - "Customer"
      summary: "Update User"
  
      description: "Allows you to update one of the following fields in an user. One should be updated at a time"
      operationId: "updateUser"
      
      parameters:
      - in: "path"
        name: "userId"
        description: "ID ofuser to be updated"
        type: "integer"
        format: "int32"
        required: true
            
      - in: "query"
        name: "field"
        description: "field to be updated"
        type: "string" 
        required: true
        
      - in: "query"
        name: "value"
        description: "New value of the previous field"
        type: "string"
        required: true
      
      responses:
        200:
          description: "Successful Request - User Updated"
        404:
          description: "Error - User Does Not Exist"
# Product Swagger
  /product:
    get:
      tags:
      - "Product"
      summary: "Obtener todos los productos"
      description: "Tener la informacion de todos los productos"
      operationId: "getProductsList"
      responses:
        200:
          description: "Successful request - Retrieving Product List"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
  
    post:
      tags:
      - "Product"
      summary: "Create new Product"
      description: "This can only be done by the logged into the system."
      operationId: "createProduct"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created Product object"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "Successful request - User added"
        405:
          description: "Error while trying to add user"   

    put:
      tags:
      - "Product"
      summary: "Product User"
  
      description: "Allows you to update one of the following fields in an Product. One should be updated at a time"
      operationId: "updateUser"
      
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Product object"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "Successful request - User added"
        405:
          description: "Error while trying to add user"  

    delete:
        tags:
        - "Product"
        summary: "Delete a Product"
        description: "Delete a Product indicating his ID"
        operationId: "deleteProduct"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Update Product object"
          required: true
          schema:
            $ref: "#/definitions/Product"
        responses:
          200:
            description: "Successful request - Product added"
          405:
            description: "Error while trying to add Product"  
# Provides Swagger
  /provider:
    get:
      tags:
      - "Provider"
      summary: "Obtener todos los Provider"
      description: "Tener la informacion de todos los Provider"
      operationId: "getProvidersList"
      responses:
        200:
          description: "Successful request - Retrieving Provider List"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Provider"

    post:
      tags:
      - "Provider"
      summary: "Create new Provider"
      description: "This can only be done by the logged into the system."
      operationId: "createProvider"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created Provider object"
        required: true
        schema:
          $ref: "#/definitions/Provider"
      responses:
        200:
          description: "Successful request - Provideradded"
        405:
          description: "Error while trying to add Provider"   

    put:
      tags:
      - "Provider"
      summary: "Provider User"
  
      description: "Allows you to update one of the following fields in an Product. One should be updated at a time"
      operationId: "updateProvider"
      
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Update Provider object"
        required: true
        schema:
          $ref: "#/definitions/Provider"
      responses:
        200:
          description: "Successful request - User added"
        405:
          description: "Error while trying to add user"  



# User Swagger
  /user:
    get:
      tags:
      - "user"
      summary: "Get All Users"
      description: "Gets all currently registered users"
      operationId: "getUsersList"
      responses:
        200:
          description: "Successful request - Retrieving User List"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
    
    post:
      tags:
      - "user"
      summary: "Create new user"
      description: "This can only be done by the logged into the system."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "Successful request - User added"
        405:
          description: "Error while trying to add user"    
  
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: Get user info by Id
      operationId: "getUserInfo"
      parameters:
      
      - in: "path"
        name: "userId"
        type: "integer"
        format: "int32"
        required: true
      
      responses:
        200:
          description: "Successful Request"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "Error - User Does Not Exist"
   
    put:
      tags:
      - "user"
      summary: "Update User"
  
      description: "Allows you to update one of the following fields in an user. One should be updated at a time"
      operationId: "updateUser"
      
      parameters:
      - in: "path"
        name: "userId"
        description: "ID ofuser to be updated"
        type: "integer"
        format: "int32"
        required: true
            
      - in: "query"
        name: "field"
        description: "field to be updated"
        type: "string" 
        required: true
        
      - in: "query"
        name: "value"
        description: "New value of the previous field"
        type: "string"
        required: true
      
      responses:
        200:
          description: "Successful Request - User Updated"
        404:
          description: "Error - User Does Not Exist"
      
    delete:
      tags:
      - "user"
      summary: "Delete an user"
      description: "Delete an user indicating his ID"
      operationId: "deleteUser"
      
      parameters:
      - in: "path"
        name: "userId"
        type: "integer"
        format: "int32"
        required: true
        
      responses:
        200:
          description: "Successful Request - User Deleted"
        404:
          description: "Error - User Does Not Exist"

  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs customer into the system"
      description: "Logs user into the system with username and pass"
      operationId: "loginCustomer"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The customer name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful L"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              description: "Calls every hour allowed when customer calls"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "Time in UTC format when token expires"
        "400":
          description: "Invalid username/password"
  
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in customer session"
      description: ""
      operationId: "logoutCustomer"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "Successful Logout"

# Reports Swagger
  /report/{month}:
    get:
      tags:
      - "sales"
      summary: Get report info by date
      operationId: "getReportInfo"
      parameters:
      - in: "path"
        name: "fecha"
        type: "integer"
        format: "date"
        description: "Fecha de la venta"
        required: true
      
      responses:
        200:
          description: "Successful Request"
          schema:
            $ref: "#/definitions/Sales"
        404:
          description: "Error -  Sales Does Not Exist"

# Security Attributes
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://star-supermarket/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "Modify fdata in your account"
      read:pets: "Read your data"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

# Models (Definitions)
definitions:
  Customer: 
    type: "object"
    properties:
      id_cliente:
        type: "string"
        description: "Llave primaria del cliente"
      name:
        type: "integer"
        description: "Nombre del cliente"
      lastname:
        type: "string"
        description: "Apellido del cliente"
      cedulaI:
        type: "string"
        description: "Cedula de identidad del cliente"
      telf:
        type: "string"
        description: "Numero de telefono del cliente"
      estado:
        type: "integer"
        description: "Estado de activo e inactivo" 
      
  Product:
    type: "object"
    properties:
      id_producto:
        type: "string"
        description: "Es el id que permite poder identificar al producto mediante una llave"
      nombre:
        type: "string"
        description: "Nombre del producto"
      descripcion:
        type: "string"
        description: "Descripcion del producto"
      categoria:
        type: "string"
        description: "Categoria del producto"
      precio_venta:
        type: "number"
        format: "double"
        description: "Precio de venta"
      stock:
        type: "integer"
        description: "Stock del producto"
      precio_compra:
        type: "integer"
        format: "double"
        description: "Precio de compra con los proveedores"
      estado:
        type: "integer"
        description: "Estado de activo e inactivo" 
      fecha_vencimiento:
        type: "integer"
        format: "date"
        description: "Fecha de vencimiento del producto"

  Provider:
    type: "object"
    properties:
      id_proveedor:
        type: "string"
        description: "Identificador del usuario"
      name:
        type: "string"
        description: "Nombre del Proveedor"
      lastname:
        type: "string"
        description: "Apellido del Proveedor"
      company:
        type: "string"
        description: "Nombre del proveedor"
      email:
        type: "string"
        description: "Correo Electronico del proveedor"
      phone:
        type: "number"
        description: "Numero de telefono del proveedor"
      estado:
        type: "integer"
        description: "Estado de activo e inactivo"  
  
  User: 
    type: "object"
    properties:
      uid_usuario:
        type: "string"
        description: "Identificador del usuario"
      identificador:
        type: "string"
        description: "Identificador del usuarios"
      fecha_creacion:
        type: "string"
        format: "date-time"
        description: "Fecha de Creacion"
      fecha_acceso:
        type: "string"
        format: "date-time"
        description: "Fecha de Acceso"

  Sales: 
    type: "object"
    properties:
      id_ventas:
        type: "string"
        description: "Identificador de la venta"
      ci_cliente:
        type: "string"
        description: "Identificador de cliente para hacer el match con la venta"
      productos:
        type: "array"
        description: "Array de Productos vendidos"
      total:
        type: "number"
        description: "Monto total de la venta"
      estado:
        type: "integer"
        description: "Estado de activo e inactivo" 
      fecha:
        type: "integer"
        format: "date"
        description: "Fecha de la venta"




# Swagger To Do
    # CLIENTES    -->   Modelo:‚úÖ | Endpoints:‚úÖ
    # PRODUCTOS   -->   Modelo:‚úÖ | Endpoints:‚úÖ
    # PROVEEDORES -->   Modelo:‚úÖ | Endpoints:‚úÖ
    # COMPRAS     -->   Modelo: - | Endpoints:
    # VENTAS      -->   Modelo:‚úÖ | Endpoints:
    # CUPONES     -->   Modelo:‚úÖ | Endpoints:‚úÖ
    # USUARIOS    -->   Modelo:‚úÖ | Endpoints:‚úÖ
    # REPORTES    -->   Modelo: - | Endpoints:‚úÖ